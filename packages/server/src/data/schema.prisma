generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AuditLog {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @map("id") @db.Uuid
  tableName String   @map("table_name") @db.VarChar
  entityId  String   @map("entity_id") @db.VarChar
  oldValue  String   @map("old_value") @db.VarChar
  newValue  String   @map("new_value") @db.VarChar
  changedBy String   @map("changed_by") @db.VarChar
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)

  @@index([tableName, entityId])
  @@map("audit_logs")
}

model Config {
  key         String   @id @map("key") @db.VarChar(255)
  value       String   @map("value") @db.VarChar
  description String   @map("description") @db.VarChar
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)

  @@map("configs")
}

model Contact {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @map("id") @db.Uuid
  userId    String?  @map("user_id") @db.Uuid
  email     String   @map("email") @db.VarChar
  phone     String?  @map("phone") @db.VarChar
  content   String   @map("content") @db.VarChar
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([userId])
  @@map("contacts")
}

model EmailVerification {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @map("id") @db.Uuid
  userId    String   @map("user_id") @db.Uuid
  email     String   @map("email") @db.VarChar
  code      String   @map("code") @db.VarChar
  expiresAt DateTime @map("expires_at") @db.Timestamp(6)
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([userId])
  @@map("email_verification")
}

model Invitation {
  id         String       @id @default(dbgenerated("gen_random_uuid()")) @map("id") @db.Uuid
  email      String       @map("email") @db.VarChar
  invitedBy  String       @map("invited_by") @db.Uuid
  teamId     String       @map("team_id") @db.Uuid
  role       UserTeamRole @map("role")
  acceptedAt DateTime?    @map("accepted") @db.Timestamp(6)
  expiresAt  DateTime     @map("expires_at") @db.Timestamp(6)
  createdAt  DateTime     @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt  DateTime     @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  user       User         @relation(fields: [invitedBy], references: [id], onDelete: Cascade, onUpdate: NoAction)
  team       Team         @relation(fields: [teamId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([id, teamId])
  @@index([teamId])
  @@index([email])
  @@map("invitations")
}

model Order {
  id                        String        @id @default(dbgenerated("gen_random_uuid()")) @map("id") @db.Uuid
  userId                    String        @map("user_id") @db.Uuid
  productId                 String        @map("product_id") @db.Uuid
  amount                    Decimal       @map("amount") @db.Decimal
  currency                  Currency      @map("currency")
  promoCodeId               String?       @map("promo_code_id") @db.Uuid
  paymentProviderType       String        @map("payment_provider_type") @db.VarChar
  paymentProviderExternalId String        @map("payment_provider_external_id") @db.VarChar
  status                    OrderStatus   @map("status")
  createdAt                 DateTime      @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt                 DateTime      @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  product                   Product       @relation(fields: [productId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  promoCode                 PromoCode?    @relation(fields: [promoCodeId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user                      User          @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  transactions              Transaction[]

  @@index([userId])
  @@map("orders")
}

model PasswordRecovery {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @map("id") @db.Uuid
  userId    String   @map("user_id") @db.Uuid
  email     String   @map("email") @db.VarChar
  code      String   @map("code") @db.VarChar
  expiresAt DateTime @map("expires_at") @db.Timestamp(6)
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  User      User?    @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([email])
  @@map("password_recovery")
}

model Plan {
  id            String         @id @default(dbgenerated("gen_random_uuid()")) @map("id") @db.Uuid
  name          String         @map("name") @db.VarChar
  config        Json           @map("config") @db.JsonB
  price         Decimal        @map("price") @db.Decimal
  currency      Currency       @map("currency")
  isAvailable   Boolean        @map("is_available") @db.Boolean
  createdAt     DateTime       @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt     DateTime       @map("updated_at") @db.Timestamp(6)
  subscriptions Subscription[]

  @@map("plans")
}

model Product {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @map("id") @db.Uuid
  name        String   @map("name") @db.VarChar
  config      Json     @map("config") @db.JsonB
  price       Decimal  @map("price") @db.Decimal
  currency    Currency @map("currency")
  stock       Int      @map("stock") @db.Integer
  maxStock    Int      @map("max_stock") @db.Integer
  isAvailable Boolean  @map("is_available") @db.Boolean
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  orders      Order[]

  @@map("products")
}

model Project {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @map("id") @db.Uuid
  teamId      String    @map("team_id") @db.Uuid
  name        String    @map("name") @db.VarChar
  deleteAfter DateTime? @map("delete_after") @db.Timestamp(6)
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt   DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  team        Team      @relation(fields: [teamId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([teamId])
  @@map("projects")
}

model PromoCode {
  id            String         @id @default(dbgenerated("gen_random_uuid()")) @map("id") @db.Uuid
  code          String         @map("code") @db.VarChar
  value         Int            @map("value") @db.Integer
  type          String         @map("type") @db.VarChar
  maxUsage      Int            @map("max_usage") @db.Integer
  currentUsage  Int            @map("current_usage") @db.Integer
  createdAt     DateTime       @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt     DateTime       @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  orders        Order[]
  subscriptions Subscription[]

  @@index([code])
  @@map("promo_codes")
}

model Referral {
  id            String         @id @default(dbgenerated("gen_random_uuid()")) @map("id") @db.Uuid
  userId        String         @map("user_id") @db.Uuid
  transactionId String         @map("transaction_id") @db.Uuid
  status        ReferralStatus @map("status")
  fee           Decimal        @map("fee") @db.Decimal
  currency      Currency       @map("currency")
  createdAt     DateTime       @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt     DateTime       @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  transaction   Transaction    @relation(fields: [transactionId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([userId])
  @@map("referrals")
}

model Session {
  id                    String       @id @default(dbgenerated("gen_random_uuid()")) @map("id") @db.Uuid
  userId                String       @map("user_id") @db.Uuid
  authProviderType      AuthProvider @map("auth_provider_type")
  userAgent             String       @map("user_agent") @db.VarChar
  ipAddress             String       @map("ip_address") @db.Inet
  refreshTokenSecretKey String       @map("refresh_token_secret_key") @db.VarChar
  revokedAt             DateTime?    @map("revoked_at") @db.Timestamp(6)
  expiresAt             DateTime     @map("expires_at") @db.Timestamp(6)
  createdAt             DateTime     @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt             DateTime     @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  user                  User         @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([userId])
  @@map("sessions")
}

model AuthorizationCode {
  id               String       @id @default(dbgenerated("gen_random_uuid()")) @map("id") @db.Uuid
  userId           String       @map("user_id") @db.Uuid
  expiresAt        DateTime     @map("expires_at") @db.Timestamp(6)
  authProviderType AuthProvider @map("auth_provider_type")
  createdAt        DateTime     @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt        DateTime     @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  user             User         @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([userId])
  @@map("authorization_codes")
}

model Subscription {
  id                        String             @id @default(dbgenerated("gen_random_uuid()")) @map("id") @db.Uuid
  teamId                    String             @map("team_id") @db.Uuid
  planId                    String             @map("plan_id") @db.Uuid
  amount                    Decimal            @map("amount") @db.Decimal
  currency                  Currency           @map("currency")
  promoCodeId               String?            @map("promo_code_id") @db.Uuid
  paymentProviderType       String             @map("payment_provider_type") @db.VarChar
  paymentProviderExternalId String             @map("payment_provider_external_id") @db.VarChar
  status                    SubscriptionStatus @map("status")
  firstBilledAt             DateTime           @map("first_billed_at") @db.Timestamp(6)
  nextBilledAt              DateTime           @map("next_billed_at") @db.Timestamp(6)
  billingCycleInterval      Int                @map("billing_cycle_interval") @db.Integer
  cancelledAt               DateTime?          @map("cancelled_at") @db.Timestamp(6)
  createdAt                 DateTime           @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt                 DateTime           @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  plans                     Plan               @relation(fields: [planId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  promoCode                 PromoCode?         @relation(fields: [promoCodeId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  team                      Team               @relation(fields: [teamId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  transactions              Transaction[]

  @@index([teamId])
  @@map("subscriptions")
}

model Team {
  id            String         @id @default(dbgenerated("gen_random_uuid()")) @map("id") @db.Uuid
  name          String         @map("name") @db.VarChar
  deleteAfter   DateTime?      @map("delete_after") @db.Timestamp(6)
  createdAt     DateTime       @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt     DateTime       @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  invitations   Invitation[]
  projects      Project[]
  subscriptions Subscription[]
  usersTeams    UserTeam[]

  @@map("teams")
}

model Transaction {
  id                 String          @id @default(dbgenerated("gen_random_uuid()")) @map("id") @db.Uuid
  subscriptionId     String?         @map("subscription_id") @db.Uuid
  orderId            String?         @map("order_id") @db.Uuid
  method             String          @map("method") @db.VarChar
  amount             Decimal         @map("amount") @db.Decimal
  currency           Currency        @map("currency")
  status             PaymentStatus   @map("status")
  providerType       PaymentProvider @map("provider_type")
  providerExternalId String          @map("provider_external_id") @db.VarChar
  paidAt             DateTime?       @map("paid_at") @db.Timestamp(6)
  chargebackAt       DateTime?       @map("chargeback_at") @db.Timestamp(6)
  createdAt          DateTime        @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt          DateTime        @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  referrals          Referral[]
  order              Order?          @relation(fields: [orderId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  subscription       Subscription?   @relation(fields: [subscriptionId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([orderId, subscriptionId])
  @@map("transactions")
}

model User {
  id                         String              @id @default(dbgenerated("gen_random_uuid()")) @map("id") @db.Uuid
  email                      String?             @unique @map("email") @db.VarChar
  role                       UserGlobalRole      @default(user) @map("role")
  password                   String?             @map("password") @db.VarChar
  salt                       String?             @map("salt") @db.VarChar
  iterations                 Int?                @map("iterations") @db.Integer
  authProviderExternalId     String?             @map("auth_provider_external_id") @db.VarChar
  authProviderType           AuthProvider        @map("auth_provider_type")
  registerIp                 String              @map("register_ip") @db.Inet
  totpAddedAt                DateTime?           @map("totp_added_at") @db.Timestamp(6)
  totpToken                  String?             @map("totp_token") @db.VarChar
  address                    String?             @map("address") @db.VarChar
  phone                      String?             @map("phone") @db.VarChar
  country                    String?             @map("country") @db.VarChar
  fullName                   String?             @map("fullname") @db.VarChar
  displayName                String              @map("display_name") @db.VarChar
  avatarUrl                  String?             @map("avatar_url") @db.VarChar
  newsletterConsentGrantedAt DateTime?           @map("newsletter_consent_granted_at") @db.Timestamp(6)
  marketingConsentGrantedAt  DateTime?           @map("marketing_consent_granted_at") @db.Timestamp(6)
  emailVerifiedAt            DateTime?           @map("email_verified_at") @db.Timestamp(6)
  disabledAt                 DateTime?           @map("disabled_at") @db.Timestamp(6)
  createdAt                  DateTime            @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt                  DateTime            @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  contact                    Contact[]
  emailVerification          EmailVerification[]
  invitations                Invitation[]
  orders                     Order[]
  referrals                  Referral[]
  sessions                   Session[]
  user_teams                 UserTeam[]
  AuthorizationCode          AuthorizationCode[]
  PasswordRecovery           PasswordRecovery[]

  @@unique([authProviderExternalId, authProviderType])
  @@index([email])
  @@map("users")
}

model UserTeam {
  // id        String       @id @default(dbgenerated("gen_random_uuid()")) @map("id") @db.Uuid
  userId    String       @map("user_id") @db.Uuid
  teamId    String       @map("team_id") @db.Uuid
  role      UserTeamRole @map("role")
  createdAt DateTime     @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt DateTime     @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  team      Team?        @relation(fields: [teamId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user      User?        @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([userId, teamId])
  // @@unique([userId, teamId])
  // @@index([userId, teamId])
  @@map("users_teams")
}

enum AuthProvider {
  email     @map("email")
  facebook  @map("facebook")
  google    @map("google")
  twitter   @map("twitter")
  github    @map("github")
  gitlab    @map("gitlab")
  bitbucket @map("bitbucket")
  apple     @map("apple")

  @@map("auth_provider")
}

enum OrderStatus {
  pending   @map("pending")
  completed @map("completed")
  cancelled @map("cancelled")
  failed    @map("failed")

  @@map("order_status")
}

enum PaymentProvider {
  paddle     @map("paddle")
  stripe     @map("stripe")
  przelewy24 @map("przelewy24")
  hotpay     @map("hotpay")
  paypal     @map("paypal")

  @@map("payment_provider")
}

enum PaymentStatus {
  pending    @map("pending")
  paid       @map("paid")
  failed     @map("failed")
  chargeback @map("chargeback")

  @@map("payment_status")
}

enum ReferralStatus {
  pending  @map("pending")
  accepted @map("accepted")
  rejected @map("rejected")

  @@map("referral_status")
}

enum SubscriptionStatus {
  active    @map("active")
  cancelled @map("cancelled")
  failed    @map("failed")

  @@map("subscription_status")
}

enum UserTeamRole {
  owner  @map("owner")
  editor @map("editor")
  viewer @map("viewer")

  @@map("user_team_role")
}

enum UserGlobalRole {
  user      @map("user")
  moderator @map("moderator")
  admin     @map("admin")

  @@map("user_global_role")
}

enum Currency {
  pln @map("pln")
  usd @map("usd")
  eur @map("eur")
  gbp @map("gbp")
  chf @map("chf")

  @@map("currency")
}
